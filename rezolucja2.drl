// Author:
//   Milosz Piglas milosz@archeocs.com
//
// Copyright (c) 2008, Milosz Piglas
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//
//    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
//    * Neither the name of the [ORGANIZATION] nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//


package sldlib;
import sldlib;
#import System;
#global System.Int32 i;

rule "unifikator"
no-loop true;
when
	pr1:Predykat($nazwa:nazwa, n:nf, np == 0, argc >= 1, $cl:cl >= 0)
    v:Vars($vf:nf == n, $vp:np)
	pr2:Predykat(nazwa == $nazwa, var1 == true, np == 0, argc >= 1, nf > $cl)
	not(Unifikator())
then
	v.uform = pr2.nf;
	modify(v);
	pr1.cl = pr2.nf;
	modify(pr1);
	assert(new Unifikator(pr2.arg1,null,pr1.arg1,null));
	System.Console.WriteLine("1.. Dodano unifikator {0} = {1} {2}",pr2.arg1,pr1.arg1,pr2.nf);
end

rule "unifikator_2"
no-loop true;
when
	pr1:Predykat($nazwa:nazwa, n:nf, np == 0, argc == 2, $cl:cl > 0)
//	v:Vars($vf:nf == n, $uform:uform)
    pr2:Predykat(nazwa == $nazwa, var2==true, np == 0, argc == 2, $pf:nf)
    v:Vars(nf == n, uform == $pf)
	u:Unifikator(krok == 0)
then
    u.var2 = pr2.arg2;
	u.sub2 = pr1.arg2;
	u.krok++;
	modify(u);
	System.Console.WriteLine("===================\n cl0: {0}, pr2.nf: {1}, v.uform: {2}", pr1.cl, pr2.nf, v.uform);
	System.Console.WriteLine("2... Dodano unifikator {0} = {1}\n==================",pr2.arg2,pr1.arg2);
end

rule "unifikator_3"
no-loop true;
when
	pr1:Predykat($nazwa:nazwa, n:nf, np == 0, argc >= 1, var1 == true, $cl:cl >= 0)
    v:Vars($vf:nf == n)
	pr2:Predykat(nazwa == $nazwa, var1 == false, np == 0, argc >= 1, nf > $cl)
	not(Unifikator())
then
	v.uform = pr2.nf;
	modify(v);
	pr1.cl = pr2.nf;
	modify(pr1);
	assert(new Unifikator(pr1.arg1,null,pr2.arg1,null));
	System.Console.WriteLine("3.. Dodano unifikator {0} = {1}",pr1.arg1,pr2.arg1);
end

rule "unifikator_4"
no-loop true;
when
	pr1:Predykat($nazwa:nazwa, n:nf, np == 0, argc == 2, var2 == true, cl > 0)
	v:Vars($vf:nf == n, $uform:uform)
    pr2:Predykat(nazwa == $nazwa, var2 == false, np == 0, argc == 2, nf == $uform)
	u:Unifikator(krok == 0)
then
	u.var2 = pr1.arg2;
	u.sub2 = pr2.arg2;
	u.krok++;
	modify(u);
	System.Console.WriteLine("++++++++++++++++\n cl0: {0}, pr2.nf: {1}", pr1.cl, pr2.nf);
	System.Console.WriteLine("4.. Dodano unifikator {0} = {1}\n+++++++++++++++++++++",u.var2,u.sub2);
end

rule "unifikator_5"
no-loop true;
when
	pr1:Predykat($nazwa:nazwa, n:nf, np == 0, argc >= 1, var1 == false, $a1:arg1, $cl:cl >= 0)
	v:Vars($vf:nf == n, $vp:np)
    pr2:Predykat(nazwa == $nazwa, var1 == false, np == 0, argc >= 1, arg1 == $a1, nf > $cl)
	not(Unifikator())
then
	v.uform = pr2.nf;
	modify(v);
	pr1.cl = pr2.nf;
	modify(pr1);
	assert(new Unifikator(pr1.arg1,null,pr2.arg1,null));
	System.Console.WriteLine("5 ... Dodano unifikator {0} = {1}",pr1.arg1,pr2.arg1);
end

rule "unifikator_6"
no-loop true;
when
	pr1:Predykat($nazwa:nazwa, n:nf, np == 0, argc == 2, var2 == false, $a1:arg1)
	v:Vars($vf:nf == n, $uform:uform)
    pr2:Predykat(nazwa == $nazwa, var2 == false, np == 0, argc == 2, arg1 == $a1, nf == $uform)
	u:Unifikator(krok == 0)
then
//	v.uform = pr2.nf;
//	modify(v);
	u.var2 = pr1.arg2;
	u.sub2 = pr2.arg2;
	u.krok++;
	modify(u);
	System.Console.WriteLine("********************\n cl0: {0}, pr2.nf: {1}", pr1.cl, pr2.nf);
	System.Console.WriteLine("6.. Dodano unifikator {0} = {1}\n********************",u.var2,u.sub2);
end

rule "predykat unarny"
no-loop;
when
	u:Unifikator(krok == 0)
	p:Predykat(argc == 1, $nf:nf)
	v:Vars(uform == $nf)
then
	u.krok++;
	modify(u);
	System.Console.WriteLine("predykat unarny {0}",p.nazwa);
end

rule "dodaj 1"
no-loop;
when
	v:Vars($next:next, $form:uform)
	u:Unifikator(krok == 1)
	p:Predykat(np == $next, argc >= 1, nf == $form)
then
	if (p.arg1 == u.var1) {
		assert(new Predykat(p.nazwa,u.sub1,v.nf-1,v.last));
	}
	else if (p.arg1 == u.var2) {
		assert(new Predykat(p.nazwa,u.sub2,v.nf-1,v.last));
	}
        else {
                assert(new Predykat(p.nazwa,p.arg1,v.nf-1,v.last));
        }
	u.krok++;
	modify(u);
	if (p.argc == 1)
	{
		v.last++;
		v.next++;
		modify(v);
		
	}
end
		
rule "dodaj 2"
no-loop;
when
	v:Vars($next:next, $form:uform, $last:last, $vf:nf)
	u:Unifikator(krok == 2)
	p:Predykat(np == $next, argc == 2, nf == $form, $nazwa:nazwa)
	nowy:Predykat(np == $last, nf < $vf, nazwa == $nazwa)
then
	if (p.arg2 == u.var1) {
		nowy.argc = 2;
		nowy.arg2 = u.sub1;
		modify(nowy);
		System.Console.WriteLine("OK {0}({1},{2}) nf: {3}, np: {4}",nowy.nazwa,nowy.arg1,u.sub1,nowy.nf,nowy.np);
	}
	else if (p.arg2 == u.var2) {
		nowy.argc = 2;
		nowy.arg2 = u.sub2;
		modify(nowy);
		System.Console.WriteLine("OK {0}({1},{2}) nf: {3}, np: {4}",nowy.nazwa,nowy.arg1,u.sub2,nowy.nf,nowy.np);
	}
        else {
		nowy.argc = 2;
		nowy.arg2 = p.arg2;
		modify(nowy);
		System.Console.WriteLine("OK {0}({1},{2}) nf: {3}, np: {4}",nowy.nazwa,nowy.arg1,nowy.arg2,nowy.nf,nowy.np);
	}
	if (p.argc == 2)
	{
		v.last++;
		v.next++;
		modify(v);
	}
	u.krok--;
	modify(u);	
end

rule "rezolwenta c.d"
no-loop;
when
	u:Unifikator(krok == 3)
	p:Predykat(nazwa:nazwa, f:nf, pp:np, argc >= 1)
	v:Vars($vf:nf == f, next == pp)
then
	if (p.arg1 == u.var1) {
		assert(new Predykat(p.nazwa,u.sub1,v.nf-1,v.last));
		System.Console.WriteLine("{0}({1}), nf: {2}, np: {3}",p.nazwa, u.sub1, p.nf, p.np);
	}
	else if (p.arg1 == u.var2) {
		assert(new Predykat(p.nazwa,u.sub2,v.nf-1,v.last));
		System.Console.WriteLine("{0}({1}), nf: {2}, np: {3}",p.nazwa, u.sub2, p.nf, p.np);
	}
	else {
		assert(new Predykat(p.nazwa,p.arg1,v.nf-1,v.last));
		System.Console.WriteLine("Dodany ...");
	}
	u.krok++;
	modify(u);
	if (p.argc == 1) {
		v.last++;
		v.next++;
		modify(v);
	}	
end

rule "pokaz"
/* usuwanie predykatow klauzuli, z ktorej zostal wykonany nawrot, tzn. v.nf++ */
when
	p:Predykat(pf:nf)
	v:Vars(nf > pf)
	not(Unifikator())
then
//	System.Console.WriteLine("Predykat: {0}({1},{2}), np: {3}, nf: {4}, v.nf {5}",p.nazwa,p.arg1,p.arg2, p.np, p.nf, v.nf);
	retract(p);
end


rule "rezolwenta 2"
no-loop;
when
	u:Unifikator(krok == 4)
	p:Predykat(f:nf, pp:np, argc == 2,$nazwa:nazwa)
	v:Vars($vf:nf == f, next == pp, $last:last)
	nowy:Predykat(nf < $vf, np == $last, nazwa == $nazwa)
then
//	System.Console.WriteLine("{0}({1}) nf: {2}, np {3})",nowy.nazwa,nowy.arg1,nowy.nf,nowy.np);
	if (p.arg2 == u.var1) {
		nowy.argc = 2;
		nowy.arg2 = u.sub1;
		modify(nowy);
	System.Console.WriteLine("OK {0}({1},{2}) nf: {3}, np: {4}",nowy.nazwa,nowy.arg1,u.sub1,nowy.nf,nowy.np);
	}
	else if (p.arg2 == u.var2) {
		nowy.argc = 2;
		nowy.arg2 = u.sub2;
		modify(nowy);
		System.Console.WriteLine("OK {0}({1},{2}) nf: {3}, np: {4}",nowy.nazwa,nowy.arg1,u.sub2,nowy.nf,nowy.np);
	}
	else {
		nowy.argc = 2;
		nowy.arg2 = p.arg2;
		modify(nowy);
		System.Console.WriteLine("OK {0}({1},{2}) nf: {3}, np: {4}",nowy.nazwa,nowy.arg1,nowy.arg2,nowy.nf,nowy.np);
	}
	if (p.argc == 2)
	{
		v.last++;
		v.next++;
		modify(v);
	}
	u.krok--;
	modify(u);
end

rule "rezolwenta end"
no-loop;
// salience -1000;
when 
	p:Predykat(f:nf, pp:np, argc == 0, nazwa == "__end")
	v:Vars(nf == f, next == pp)
	u:Unifikator(krok >= 3)
then
        System.Console.WriteLine("last: "+v.last);
        if (v.last != 0) {
            retract(u);
           	assert(new Predykat("__end",v.nf-1,v.last));
	    	System.Console.WriteLine("koniec rezolwenty" + v.last);
            v.nf--;
            v.last=0;
            v.next=1;
            modify(v);
        }
        else {
        	//retract(p);
            System.Console.WriteLine("Sukces");
        }
end

rule "form end"
no-loop;
salience -2000;
when
	p:Predykat(f:nf, pp:np, argc == 0)
	v:Vars(uform == f, next == pp, vf:nf)
	u:Unifikator()
then
	System.Console.WriteLine("OK"+p.nazwa);
	u.krok = 3;
	modify(u);
 	v.next = 1;
	modify(v);	
end


rule "retract unifikator argc == 1"
no-loop
when
	v:Vars($vf:nf, $vp:np)
	pr1:Predykat($nazwa:nazwa, nf==$vf, np == 0, argc >= 1, var1 == false, $a1:arg1, $cl:cl >= 0)
	pr2:Predykat(nazwa == $nazwa, var1 == false, np == 0, argc >= 1, arg1 != $a1, nf > $cl)
then
	pr1.cl = pr2.nf;
	modify(pr1);
	System.Console.WriteLine("Nie mozna uzgodnic predykatow ");
end
	

rule "usun unifikator argc == 2"
no-loop
when
	v:Vars($vf:nf, $uform:uform)
	pr1:Predykat($nazwa:nazwa, nf==$vf, np == 0, argc == 2, var2 == false, $a1:arg2, cl > 0)
	pr2:Predykat(nazwa == $nazwa, var2 == false, np == 0, argc == 2, arg2 != $a1, nf == $uform)
	u:Unifikator(krok == 0)
then
	retract(u);
	System.Console.WriteLine("Unifikator usuniety "+u.krok);
end

rule "nawrot"
no-loop
when
    v:Vars($vf:nf)
    not(Unifikator())
    pr:Predykat($nazwa:nazwa, argc >=1, nf == $vf, np == 0, $cl:cl)
    not(Predykat(nazwa == $nazwa, nf > $cl, argc >= 1))
    
then
	v.nf++;
	modify(v);
    System.Console.WriteLine("Nawrot: {0}({1},{2}), pr.cl: {3}, pr.nf: {4}",pr.nazwa,pr.arg1,pr.arg2,pr.cl,pr.nf);
end
